<launch>

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find carsim_gazebo)/worlds/carsim.world"/>
        <!-- Available Worlds to choose from
        - empty.world
        - carsim.world
        - too_complex.world           # Pre-planned route will not work probably
        - carsim_without_trees.world
        -->
    </include>

    <!-- Robot pose -->
    <arg name="x" default="-20"/>
    <arg name="y" default="-20"/>
    <arg name="z" default="0.2"/>
    <arg name="roll" default="0"/>
    <arg name="pitch" default="0"/>
    <arg name="yaw" default="1.570796"/>

	<!-- Hector_slam config -->
	<param name="/use_sim_time" value="true"/> 
	<arg name="geotiff_map_file_path" default="$(find hector_geotiff)/maps"/> 

	<!--node pkg="rviz" type="rviz" name="rviz"
	args="-d $(find carsim_gazebo)/rviz_cfg/mapping_demo.rviz"/-->

	<include file="$(find carsim_gazebo)/launch/mapping_default_ok.launch"/> 
	<include file="$(find hector_geotiff)/launch/geotiff_mapper.launch">
		<arg name="trajectory_source_frame_name" value="scanmatcher_frame"/> 
		<arg name="map_file_path" value="$(arg geotiff_map_file_path)"/> 
	</include> 

      
    <!-- Spawn a robot into Gazebo -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
    args="-file $(find carsim_discription)/urdf/model.urdf -urdf 
    -x $(arg x) -y $(arg y) -z $(arg z) 
    -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) 
    -model carsim" />

    <!-- ros_control carsim launch file -->
    <!-- For control joints    -->
    <include file="$(find carsim_control)/launch/carsim_control.launch" />

	<!-- Static transforms    -->
	<!-- node pkg="tf2_ros" type="static_transform_publisher" name="odom" args="0  0  0  0  0  0  odom map"/ -->

</launch>


